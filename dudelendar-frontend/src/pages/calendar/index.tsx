import React, { useEffect } from 'react'
import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import { CalendarScheduler } from '../../components/CalendarScheduler'
import { mapArrayEventCalendar } from '../../domain/EventCalendar'
import { getAllEventsCalendar, getAllEventsCalendarById } from '../../services/eventCalendarApi'
import { ContainerMain } from '../../styles/Home'
import { getSession, useSession } from 'next-auth/react'
import { useSetState } from '@mantine/hooks'

interface IHomeProps {
  listAllEventsCalendar: any
  eventsCalendar: any
}

const Home = ({ listAllEventsCalendar , eventsCalendar}: IHomeProps) => {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [listEventsCalendar, setListEventsCalendar] = useState<any[]>(listAllEventsCalendar)
  const [eventsCalenDarId, setEventsCalenDarId] = useState<any[]>(listAllEventsCalendar)
  const [userId, setUserId] = useState(0)
  const [count, setCount] = useState(0)
  // const eventsCalendar = getAllEventsCalendar()
  // console.log('eventsCalendar', eventsCalendar)
  // const a = listEventsCalendar
  const { data: session } = useSession()

  useEffect(() => {
    if(session){
      doSomething()
      // setUserId(session.userid)
      // setCount(count + 1)
    }
  }, [JSON.stringify(listEventsCalendar)]);
  // var b:any[]
  // console.log('listEventsCalendar: ', listEventsCalendar)
  // const newEvents = mapArrayEventCalendar(test)
  

  // async function getEachEventsCalendar() {
  console.log('session from event', session?.userid)
  // console.log('listEventsCalendar', listEventsCalendar)
  const tempID = session != undefined ? session.userid : 10
  // const eventById = getAllEventsCalendarById(session != undefined ? session.userid : 10)

  
  // console.log('eventsCalendar: ', eventsCalendar)

  // const theEvents = eventById.then((value)=>{
  //   // console.log("eventsById: ", value)
  //   return value   
  // })

  
  // const finalizeEvents = async () => {
  //   const a = await theEvents;
  //   console.log("in async",a);
    
  //   console.log("eventsCalenDarId", eventsCalenDarId)
  //   return a
  // };

  async function doSomething() {
    const jsonData = {
      userid: tempID
    }
    const eventById = getAllEventsCalendarById(jsonData)
    
    const theEvents = eventById.then((value)=>{
      // console.log("eventsById: ", value)
      return value   
    })
    
    const finalizeEvents = async () => {
      const a = await theEvents;
      // console.log("in async",a);
      
      // console.log("eventsCalenDarId", eventsCalenDarId)
      return a
    };
    let result = await finalizeEvents();
    // console.log("result", result);

    console.log("listEventsCalendar before ",listEventsCalendar)
    setListEventsCalendar(result)
    // console.log("listEventsCalendar after ",listEventsCalendar)
  }
  console.log("listEventsCalendar after ",listEventsCalendar)
  // console.log("listEventsCalendar after final ",listEventsCalendar)

  // const listAllEventsCalendarByID = mapArrayEventCalendar(finalizeEvents())
  
    // console.log("eventById:",eventById.then((value)=>{
    //   value
    // }))
    // const listAllEventsCalendarByID = mapArrayEventCalendar(eventById)

    // eventById.then((value: any) => {
    //   console.log(value);
      // expected output: "Success!"
    // });
    
    // console.log('test', eventById)
    // return eventById
  // };

  // const getEachEvents = getEachEventsCalendar()
  // console.log("getEachEvents",getEachEvents)
  // console.log("log from server", eventsCalendar)
  // if (test !== undefined) {
  // }
  // a.forEach((event, index) => {
  //   if (session && session.user?.userid != event.user) {
  //     b.push(event)
  //   }
  // })
  // console.log('listEventsCalendar after', b)

  // useEffect(()=>{
  //   // const a = listEventsCalendar;
  //   // console.log('listEventsCalendar: ', listEventsCalendar)
  //   // const { data:session} = useSession();
  //   // a.forEach((event, index) =>{
  //   //   if (session && session.user?.userid != event.user) {
  //   //     listAllEventsCalendar.splice(index, 1)
  //   //   }
  //   // })
  //   // setListEventsCalendar(a)

  // },[JSON.stringify(listEventsCalendar)])

  return (
    <>
      <Head>
        <title>DUDELendar Scheduler</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {listEventsCalendar[0].user}
      </div>
      <div className=""></div>
      <ContainerMain>
        <CalendarScheduler eventsCalendar={listEventsCalendar} />
      </ContainerMain>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async () => {
  // const session = await getSession()
  // console.log('session from server', session != null ? session : 'nothing')
  const eventsCalendar = await getAllEventsCalendar()
  // console.log("log from server", eventsCalendar)
  const listAllEventsCalendar = mapArrayEventCalendar(eventsCalendar)
  // console.log("listAllEventsCalendar: ",listAllEventsCalendar)

  return {
    props: {
      eventsCalendar: eventsCalendar ??[],
      listAllEventsCalendar: listAllEventsCalendar ?? [],
    },
  }
}

export default Home
